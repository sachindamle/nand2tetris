// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    Mux16(a[15]=false, a[0..14]=instruction[0..14], b=aluOut, sel=instruction[15], out=toARegister); // If A instruction instruction[15] is zero hence pickup "a" input
    Not(in=instruction[15], out=aInst);	// if its an A Instruction value of control bit is ZERO
    And(a=instruction[15], b=true, out=cInst);	// if its an C Instruction value of control bit is ONE
	Or(a=aInst, b=instruction[5], out=loadA); // load A if either its an A instruction or dest bit for register A is set
    ARegister(in=toARegister, load=loadA, out=aRegOut, out[0..14]=addressM);
    
    //Decide whether to take input from A or M - determined by "a" bit in instruction
    Mux16(a=aRegOut, b=inM, sel=instruction[12], out=aOrM);	
    
    // Decide if D register is to be loaded from ALU based on destination bit in instruction
    And(a=cInst, b=instruction[4], out=loadD); // load D; if its a C instruction (instruction[15]=1) and dest bit for register D is set
    DRegister(in=aluOut, load=loadD, out=dOut);
    
    // ALU
    ALU(x=dOut, y=aOrM, 
    	zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6],
    	out=outM, out=aluOut,
    	zr=zr,
    	ng=ng);
    	
   	// Determine to write to Memory 
	And(a=instruction[3], b=cInst, out=writeM); // write to M (memory); if its a C instruction (instruction[15]=1) and dest bit for memory M is set
	
	// Determine PC instruction
	// If reset is non-zero set PC=0
	// If reset is zero, use Jump bits and ALU control bits outputs
	Not(in=ng,out=positive);
	Not(in=zr,out=nonZero);
	And(a=positive, b=nonZero, out=gtZero); // if gtZero = 1; result >0
	
	And(a=cInst, b=instruction[0],out=jgt);
	And(a=cInst, b=instruction[1], out=jeq);
	And(a=cInst, b=instruction[2], out=jlt);
	
	And(a=jgt, b=gtZero, out=jmp0);
	And(a=jeq, b=zr, out=jmp1);
	And(a=jlt, b=ng, out=jmp2);
		
	Or(a=jmp0,b=jmp1,out=jmp01);
	Or(a=jmp01,b=jmp2,out=loadPc);
	
	PC(in=aRegOut, load=loadPc, inc=true, reset=reset, out[0..14]=pc);
    
}