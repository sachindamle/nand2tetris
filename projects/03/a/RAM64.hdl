// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    // Put your code here:
    DMux8Way(in=load, sel=address[3..5], a=r0In, b=r1In, c=r2In, d=r3In, e=r4In, f=r5In, g=r6In, h=r7In);
    RAM8(in=in, load=r0In, address=address[0..2], out=r0Out);
  	RAM8(in=in, load=r1In, address=address[0..2], out=r1Out);
  	RAM8(in=in, load=r2In, address=address[0..2], out=r2Out);
  	RAM8(in=in, load=r3In, address=address[0..2], out=r3Out);
  	RAM8(in=in, load=r4In, address=address[0..2], out=r4Out);
  	RAM8(in=in, load=r5In, address=address[0..2], out=r5Out);
  	RAM8(in=in, load=r6In, address=address[0..2], out=r6Out);
  	RAM8(in=in, load=r7In, address=address[0..2], out=r7Out);
    Mux8Way16(a=r0Out, b=r1Out, c=r2Out, d=r3Out, e=r4Out, f=r5Out, g=r6Out, h=r7Out, sel=address[3..5], out=out);
}